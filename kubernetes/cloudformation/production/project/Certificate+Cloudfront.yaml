AWSTemplateFormatVersion: '2010-09-09'
Resources:
  CustomAcmCertificateLambda:
    Type: AWS::Lambda::Function
    Metadata:
      Source: https://github.com/dflook/cloudformation-dns-certificate
      Version: 1.7.0
    Properties:
      Code:
        ZipFile: "T=RuntimeError\nimport copy,hashlib as s,json,logging as B,time\n\
          from boto3 import client as L\nfrom botocore.exceptions import ClientError\
          \ as t,ParamValidationError as u\nfrom botocore.vendored import requests\
          \ as v\nA=B.getLogger()\nA.setLevel(B.INFO)\nD=A.info\nR=A.exception\ne=json.dumps\n\
          M=copy.copy\nS=time.sleep\ndef handler(event,c):\n\tA8='OldResourceProperties';A7='Update';A6='Delete';A5='None';A4='acm';A3='FAILED';A2='properties';A1='stack-id';A0='logical-id';z='DNS';r='Old';q='Certificate';p='LogicalResourceId';o='DomainName';n='Route53RoleArn';m='Region';d='RequestType';b='Reinvoked';a='StackId';Z='DomainValidationOptions';Y='ValidationMethod';X=None;Q='Status';P='Key';O='';N=True;K='ResourceProperties';J='cloudformation:';I='Value';H=False;G='CertificateArn';F='Tags';C='PhysicalResourceId';A=event;f=c.get_remaining_time_in_millis;D(A)\n\
          \tdef g():\n\t\tD=M(B)\n\t\tfor H in ['ServiceToken',m,F,n]:D.pop(H,X)\n\
          \t\tif Y in B:\n\t\t\tif B[Y]==z:\n\t\t\t\tfor I in set([B[o]]+B.get('SubjectAlternativeNames',[])):k(I)\n\
          \t\t\t\tdel D[Z]\n\t\tA[C]=E.request_certificate(IdempotencyToken=x,**D)[G];l()\n\
          \tdef U(a):\n\t\twhile N:\n\t\t\ttry:E.delete_certificate(**{G:a});return\n\
          \t\t\texcept t as B:\n\t\t\t\tR(O);A=B.response['Error']['Code']\n\t\t\t\
          \tif A=='ResourceInUseException':\n\t\t\t\t\tif f()/1000<30:raise\n\t\t\t\
          \t\tS(5);continue\n\t\t\t\tif A in['ResourceNotFoundException','ValidationException']:return\n\
          \t\t\t\traise\n\t\t\texcept u:return\n\tdef V(props):\n\t\tfor H in E.get_paginator('list_certificates').paginate():\n\
          \t\t\tfor B in H['CertificateSummaryList']:\n\t\t\t\tD(B);C={A[P]:A[I]for\
          \ A in(E.list_tags_for_certificate(**{G:B[G]})[F])}\n\t\t\t\tif C.get(J+A0)==A[p]and\
          \ C.get(J+A1)==A[a]and C.get(J+A2)==hash(props):return B[G]\n\tdef h():\n\
          \t\tif A.get(b,H):raise T('Certificate not issued in time')\n\t\tA[b]=N;D(A);L('lambda').invoke(FunctionName=c.invoked_function_arn,InvocationType='Event',Payload=e(A).encode())\n\
          \tdef i():\n\t\twhile f()/1000>30:\n\t\t\tB=E.describe_certificate(**{G:A[C]})[q];D(B)\n\
          \t\t\tif B[Q]=='ISSUED':return N\n\t\t\telif B[Q]==A3:raise T(B.get('FailureReason',O))\n\
          \t\t\tS(5)\n\t\treturn H\n\tdef w():B=M(A[r+K]);B.pop(F,X);C=M(A[K]);C.pop(F,X);return\
          \ B!=C\n\tdef j():\n\t\tb='Type';a='Name';W='HostedZoneId';V='ValidationStatus';U='PENDING_VALIDATION';O='ResourceRecord'\n\
          \t\tif Y in B and B[Y]==z:\n\t\t\tJ=H\n\t\t\twhile not J:\n\t\t\t\tJ=N;K=E.describe_certificate(**{G:A[C]})[q];D(K)\n\
          \t\t\t\tif K[Q]!=U:return\n\t\t\t\tfor F in K[Z]:\n\t\t\t\t\tif V not in\
          \ F or O not in F:J=H;continue\n\t\t\t\t\tif F[V]==U:P=k(F[o]);R=P.get(n,B.get(n));M=L('sts').assume_role(RoleArn=R,RoleSessionName=(q+A[p])[:64],DurationSeconds=900)['Credentials']if\
          \ R is not X else{};T=L('route53',aws_access_key_id=M.get('AccessKeyId'),aws_secret_access_key=M.get('SecretAccessKey'),aws_session_token=M.get('SessionToken')).change_resource_record_sets(**{W:P[W],'ChangeBatch':{'Comment':'Domain\
          \ validation for '+A[C],'Changes':[{'Action':'UPSERT','ResourceRecordSet':{a:F[O][a],b:F[O][b],'TTL':60,'ResourceRecords':[{I:F[O][I]}]}}]}});D(T)\n\
          \t\t\t\tS(1)\n\tdef k(n):\n\t\tC='.';n=n.rstrip(C);D={A[o].rstrip(C):A for\
          \ A in(B[Z])};A=n.split(C)\n\t\twhile len(A):\n\t\t\tif C.join(A)in D:return\
          \ D[C.join(A)]\n\t\t\tA=A[1:]\n\t\traise T(Z+' missing'+' for '+n)\n\thash=lambda\
          \ v:s.new('md5',e(v,sort_keys=N).encode()).hexdigest()\n\tdef l():B=M(A[K].get(F,[]));B+=[{P:J+A0,I:A[p]},{P:J+A1,I:A[a]},{P:J+'stack-name',I:A[a].split('/')[1]},{P:J+A2,I:hash(A[K])}];E.add_tags_to_certificate(**{G:A[C],F:B})\n\
          \tdef W():D(A);B=v.put(A['ResponseURL'],json=A,headers={'content-type':O});B.raise_for_status()\n\
          \ttry:\n\t\tx=hash(A['RequestId']+A[a]);B=A[K];E=L(A4,region_name=B.get(m));A[Q]='SUCCESS'\n\
          \t\tif A[d]=='Create':\n\t\t\tif A.get(b,H)is H:A[C]=A5;g()\n\t\t\tj()\n\
          \t\t\tif not i():return h()\n\t\telif A[d]==A6:\n\t\t\tif A[C]!=A5:\n\t\t\
          \t\tif A[C].startswith('arn:'):U(A[C])\n\t\t\t\telse:U(V(B))\n\t\telif A[d]==A7:\n\
          \t\t\tif w():\n\t\t\t\tD(A7)\n\t\t\t\tif V(B)==A[C]:\n\t\t\t\t\ttry:E=L(A4,region_name=A[A8].get(m));D(A6);U(V(A[A8]))\n\
          \t\t\t\t\texcept:R(O)\n\t\t\t\t\treturn W()\n\t\t\t\tif A.get(b,H)is H:g()\n\
          \t\t\t\tj()\n\t\t\t\tif not i():return h()\n\t\t\telse:\n\t\t\t\tif F in\
          \ A[r+K]:E.remove_tags_from_certificate(**{G:A[C],F:A[r+K][F]})\n\t\t\t\t\
          l()\n\t\telse:raise T(A[d])\n\t\treturn W()\n\texcept Exception as y:R(O);A[Q]=A3;A['Reason']=str(y);return\
          \ W()"
      Description: Cloudformation custom resource for DNS validated certificates
      Handler: index.handler
      Role: !GetAtt 'CustomAcmCertificateLambdaExecutionRole.Arn'
      Runtime: python3.6
      Timeout: 900

  CustomAcmCertificateLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - acm:AddTagsToCertificate
                  - acm:DeleteCertificate
                  - acm:DescribeCertificate
                  - acm:RemoveTagsFromCertificate
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:acm:*:${AWS::AccountId}:certificate/*'
              - Action:
                  - acm:RequestCertificate
                  - acm:ListTagsForCertificate
                  - acm:ListCertificates
                Effect: Allow
                Resource:
                  - '*'
              - Action:
                  - route53:ChangeResourceRecordSets
                Effect: Allow
                Resource:
                  - arn:aws:route53:::hostedzone/*
              - Action:
                  - sts:AssumeRole
                Effect: Allow
                Resource:
                  - arn:aws:iam::828821066173:role/ACMRecordCreationRoleProjectName
            Version: '2012-10-17'
          PolicyName: !Sub '${AWS::StackName}CustomAcmCertificateLambdaExecutionPolicy'

  Certificate:
    Type: Custom::DNSCertificate
    Properties:
      Region: "us-east-1"
      ServiceToken: !GetAtt 'CustomAcmCertificateLambda.Arn'
      DomainName: "*.example.com"
      DomainValidationOptions:
        - DomainName: "*.example.com"
          HostedZoneId: 'Z3OJB7MRS6HJSO'
          Route53RoleArn: arn:aws:iam::828821066173:role/ACMRecordCreationRoleprojectName
      # NOTE: When we select "DNS" validation, we need to add the CNAME to Route53 in order for the validation to complete
      ValidationMethod: "DNS"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - prodcdn.example.com
        DefaultRootObject: ''
        Origins:
          - Id: S3-prod-example-static
            DomainName: prod-example-static.s3.amazonaws.com
            S3OriginConfig:
              OriginAccessIdentity: ''
        DefaultCacheBehavior:
          TargetOriginId: S3-prod-example-static
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
            Headers:
              - Access-Control-Request-Headers
              - Access-Control-Request-Method
              - Origin
          ViewerProtocolPolicy: redirect-to-https
          MinTTL: 0
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          CachedMethods:
            - HEAD
            - GET
          SmoothStreaming: false
          DefaultTTL: 86400
          MaxTTL: 31536000
          Compress: true
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.1_2016
        Restrictions:
          GeoRestriction:
            RestrictionType: none
        HttpVersion: http2
        IPV6Enabled: true
        Enabled: true

  CloudFrontInvalidationRole:
    Type: "AWS::IAM::Role"
    Properties:
      #Description: "Role for Atlas user to access invalidate objects in CloudFront"
      RoleName: "create-invalidation-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              AWS: "arn:aws:iam::578089560574:user/atlas-stage"
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              AWS: "arn:aws:iam::578089560574:role/atlas-api-role"
      Path: "/"
      Policies:
        - PolicyName: "cloudfront-access-policy-projectName"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cloudfront:GetDistribution"
                  - "cloudfront:ListDistributions"
                  - "cloudfront:CreateInvalidation"
                Resource: "*"
